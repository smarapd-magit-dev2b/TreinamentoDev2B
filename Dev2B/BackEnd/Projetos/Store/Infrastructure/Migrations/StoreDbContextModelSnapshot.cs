// <auto-generated />
using System;
using Infrastructure.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    partial class StoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE")
                        .HasColumnName("birthDate");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("CHAR(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("CHAR(9)")
                        .HasColumnName("rg");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("customer");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("INT")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .HasMaxLength(75)
                        .HasColumnType("VARCHAR(75)")
                        .HasColumnName("description");

                    b.Property<DateTime>("InclusionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("inclusionDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("Price")
                        .HasColumnType("MONEY")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasFilter("[description] IS NOT NULL");

                    b.ToTable("product");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("INT")
                        .HasColumnName("customerId");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("sale");
                });

            modelBuilder.Entity("Domain.SaleItem", b =>
                {
                    b.Property<int>("SaleId")
                        .HasColumnType("INT")
                        .HasColumnName("saleId");

                    b.Property<int>("ProductId")
                        .HasColumnType("INT")
                        .HasColumnName("productId");

                    b.Property<int>("Amount")
                        .HasColumnType("INT")
                        .HasColumnName("amount");

                    b.Property<decimal>("Price")
                        .HasColumnType("MONEY")
                        .HasColumnName("price");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int");

                    b.HasKey("SaleId", "ProductId")
                        .HasName("PK_SaleItem");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.ToTable("saleItem");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.HasOne("Domain.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_COSTUMER_ID_Sale#ID_Costumer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.SaleItem", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PRODUCT_ID_SaleItem#ID_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Product", null)
                        .WithMany("Items")
                        .HasForeignKey("ProductId1");

                    b.HasOne("Domain.Sale", "Sale")
                        .WithMany("Items")
                        .HasForeignKey("SaleId")
                        .HasConstraintName("FK_SALE_ID_SaleItem#ID_Sale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
